use utils;
use std::cmp::max;
use std::i32;

pub fn max_sum() {
    let vals: Vec<i32> = utils::read_ints();
    let cnxs: Vec<Vec<usize>> = utils::read_tree();
    let mut max_sum: i32 = i32::MIN;

    let max = max_path(0, &vals, &cnxs, &mut max_sum);
}

fn max_path(i: usize, vals: &Vec<i32>,
            cnxs: &Vec<Vec<usize>>, max_sum: &mut i32)
            -> i32 {
    let mut subsums = Vec::new();
    
    for node in cnxs[i] {
        if node != i {
            subsums.push(max_path(node, vals, cnxs, max_sum));
        }
    }

    let best_subsum = if subsums.is_empty() { 0 } else { i32::MIN };
    let sum_of_sums = 0;
    for sum in subsums {
        sum_of_sums += sum;
        if sum > best_subsum {
            best_subsum = sum;
        }
    }
    *max_sum = max(*max_sum, sum_of_sums);
    best_subsum + vals[i]
}
